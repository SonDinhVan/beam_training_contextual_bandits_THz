"""
This module is to provide utilies for processing the data.
"""
import numpy as np


def craft_data(dataset: np.array) -> list:
    """
    This function takes a dataset generated by using the deepMIMO library and
    returns a list of channel and location data.

    The channel and location data then will be used for performance benchmark.

    Args:
        dataset (np.array): The dataset generated by the deepMIMO library.

    Returns:
        List: H (np.array): Channel data.
              loc (np.array): Location data contains the x and y coordinates.

    """
    # Channel data
    H = []
    # Location data
    loc = []

    # UE moves along A -> B
    # A = dataset[0]['user']['location'][0]
    # B = dataset[0]['user']['location'][180]
    for i in range(181):
        H.append(dataset[0]['user']['channel'][i][:, :, 0])
        loc.append(dataset[0]['user']['location'][i][:2])

    # UE moves along B -> C
    # C = dataset[0]['user']['location'][181 * 2750 + 180]
    for i in np.arange(1, 2751):
        H.append(dataset[0]['user']['channel'][181 * i + 180][:, :, 0])
        loc.append(dataset[0]['user']['location'][181 * i + 180][:2])

    # UE moves along C -> D
    # D = dataset[0]['user']['location'][181 * 2750 + 0]
    for i in np.arange(1, 181):
        H.append(dataset[0]['user']['channel'][181 * 2750 + 180 - i][:, :, 0])
        loc.append(dataset[0]['user']['location'][181 * 2750 + 180 - i][:2])

    # UE moves along D -> E
    # E = dataset[0]['user']['location'][181 * (2750 - 1650 + 1)]
    for i in np.arange(2749, 1650, -1):
        H.append(dataset[0]['user']['channel'][181 * i][:, :, 0])
        loc.append(dataset[0]['user']['location'][181 * i][:2])

    # UE moves along E -> F
    # E = dataset[0]['user']['location'][181 * 2751 + 1101 * 129 + 1100]
    # F = dataset[0]['user']['location'][181 * 2751 + 1101 * 129 + 0]
    for i in np.arange(1100, -1, -1):
        H.append(
            dataset[0]['user']['channel'][181 * 2751 + 1101 * 129 + i][:, :, 0]
        )
        loc.append(
            dataset[0]['user']['location'][181 * 2751 + 1101 * 129 + i][:2]
        )

    # UE moves along F -> G
    # G = dataset[0]['user']['location'][181 * 2751 + 1101 * 0]
    for i in np.arange(128, -1, -1):
        H.append(dataset[0]['user']['channel'][181 * 2751 + 1101 * i][:, :, 0])
        loc.append(dataset[0]['user']['location'][181 * 2751 + 1101 * i][:2])

    # UE moves along G -> H
    # H = dataset[0]['user']['location'][181 * 2751 + 1100]
    for i in range(1101):
        H.append(dataset[0]['user']['channel'][181 * 2751 + i][:, :, 0])
        loc.append(dataset[0]['user']['location'][181 * 2751 + i][:2])

    # UE moves along H -> A
    for i in np.arange(1523, -1, -1):
        H.append(dataset[0]['user']['channel'][181 * i][:, :, 0])
        loc.append(dataset[0]['user']['location'][181 * i][:2])

    H = np.array(H)
    loc = np.array(loc)

    # discard the data whose all items zero
    print('Before discarding zero data: ', H.shape, loc.shape)
    zero_id = []
    for i in range(len(H)):
        if np.all(H[i] == 0):
            zero_id.append(i)

    H = np.delete(H, zero_id, axis=0)
    loc = np.delete(loc, zero_id, axis=0)
    print('After discarding zero data: ', H.shape, loc.shape)

    return H, loc
